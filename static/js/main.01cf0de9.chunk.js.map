{"version":3,"sources":["components/header/Header.jsx","components/card/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","restartGame","react_default","a","createElement","className","id","reactjs_popup_es","trigger","modal","close","href","onClick","console","log","Card","isFlipped","handleClick","cardNumber","cardImage","react_card_flip_default","flipSpeedBackToFront","flipSpeedFrontToBack","value","concat","key","shuffle","require","collection","App","state","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","isClicked","score","tally","timerStart","event","preventDefault","cardId","target","cardValue","newFlipps","_this","slice","newScore","parseInt","setState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","newTally","setTimeout","flipBack","randomDeduction","floor","tallyScore","_this2","this","header_Header","map","index","card_Card","PureComponent","reduce","preValue","current","array","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01cf0de9.chunk.js","sourcesContent":["\nimport React from 'react';\nimport Popup from \"reactjs-popup\";\n\nconst Header = ({ restartGame }) => (\n<div>\n\n<h1 className=\"justify-center\"> Clicky Game 2.0 </h1>\n<div id=\"menu-outer\">\n  <div className=\"table\">\n  <ul id=\"horizontal-list\">\n  <li><Popup trigger={<button className=\"button directions\"> HOW TO PLAY </button>} modal>\n    {close => (\n      <div className=\"modal\">\n        <a className=\"close\" href=\"#\" onClick={close}>\n          &times;\n        </a>\n        <div className=\"header\"> How to Play </div>\n        <div className=\"content\">\n          {' '}\n          Clicky Game 2.0 is a Memory Card Game with a twist. You earn points by clicking on \n          the cards but watch out if don't have a match, you can end up losing a random number of \n          points! \n          <br />\n          To make it a little harder, the images on the cards keep shifting. Have fun! \n          The object of the game is to clear the board with the most points!\n        </div>\n        <div className=\"actions\">\n       \n          <button\n            className=\"button\"\n            onClick={() => {\n              console.log('modal closed ')\n              close()\n            }}\n          >\n            Let's play! \n          </button>\n        </div>\n      </div>\n    )}\n  </Popup> </li>\n\n     <li><button onClick={restartGame} className=\"restart-button\">RESTART GAME</button> </li>\n    \n    </ul>\n    </div>\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\nimport ReactCardFlip from \"react-card-flip\";\n\n\n\nconst Card = ({ id, isFlipped, handleClick, cardNumber, cardImage }) => (\n  <ReactCardFlip isFlipped={isFlipped} flipSpeedBackToFront={1} flipSpeedFrontToBack={1} >\n    <button id={id} value= {cardNumber} className={`card card-front ${cardImage} ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"front\">\n     \n    </button>\n\n    <button id={id} className={`card card-back ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"back\">\n      { cardNumber }\n    </button>\n  </ReactCardFlip>\n);\n\nexport default Card;","import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\n\n\n\n\n\n\nimport './styles/main.css';\n\nconst shuffle = require('shuffle-array'),\n    collection = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen'];\n\n\n\n    class App extends PureComponent {\n\n  state = { \n    isFlipped: Array(16).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1,\n    isClicked: false,\n    score: 0,\n    tally: 0,\n    timerStart: false\n\n  };\n\n  static duplicateCard = () => {\n    return [0,1,2,3,4,5,6,7].reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const cardValue = event.target.value;\n    const newFlipps = this.state.isFlipped.slice();\n    const newScore = this.state.score + parseInt(cardValue)\n  \n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId,\n        score: newScore,\n        timerStart: true\n           \n\n    }); \n    \n   console.log(this.state.score)\n   console.log(\"Score\" + newScore)\n   \n\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState({ \n        isFlipped: newFlipps,\n        clickCount: 2\n      });\n\n      if (this.state.clickCount === 2) {\n        this.setState({ \n          clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  \n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      const newTally = this.state.tally + 1\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState({\n          shuffledCard: hideCard,\n          tally: newTally\n        })\n      }, 1000)}\nconsole.log(\"Tally\" + this.state.tally)\n\n    if (this.state.tally === 8) {\n      this.setState({\n        timerStart: false    \n      })\n\n    }\n     else {\n      const flipBack = this.state.isFlipped.slice();\n      const randomDeduction = Math.floor(Math.random() * 10) + 5\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState({ \n          isFlipped: flipBack,\n          score: this.state.score - randomDeduction });\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(16).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1,\n      score: 0\n    });\n  };\n\n\ntallyScore = () =>{\n  return this.state.score\n}\n\n  render() {\n\n\n    \nshuffle(collection);\n \n\n    return (\n     <div>\n\n\n      \n       <Header restartGame={this.restartGame} />\n  \n       <p className=\"justify-center\"> Score: {this.tallyScore()}</p>\n    \n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n              <Card\n                key={index} \n                id={index} \n                cardImage= {collection[index]}\n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick} \n               \n                \n                  \n              />\n            )\n          }\n        </div>\n       \n\n       \n     </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}